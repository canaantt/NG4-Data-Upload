version: 2
jobs:
    # The build job
    build:
        # working_directory: ~/repo
        docker:
            - image: circleci/node:6.10-browsers
        steps:
            # Checkout the code from the branch into the working_directory
            - checkout
            # Log the current branch
            - run:
                name: Show current branch
                command: echo ${CIRCLE_BRANCH}
            # Restore local dependencies from cache
            - restore_cache:
                keys:
                - v1-dependencies-{{ checksum "package.json" }}
                - v1-dependencies-
            # Install project dependencies
            - run:
                name: Install local dependencies
                command: npm install
            # Cache local dependencies if they don't exist
            - save_cache:
                key: v1-dependencies-{{ checksum "package.json" }}
                paths:
                    - node_modules
            # Lint the source code
            - run:
                name: Linting
                command: echo "empty linting"
            # Test the source code
            - run:
                name: Testing
                command: echo "empty test"
            - run:
                name: Building
                command: |
                    if [ "${CIRCLE_BRANCH}" == "staging" ]; then
                        npm run build-qa
                    elif [ "${CIRCLE_BRANCH}" == "master" ]; then
                        npm run build-prod
                    else
                        npm run build-dev
                    fi
            # Cache the dist folder for the deploy job
            - save_cache:
                key: v1-dist-{{ .Environment.CIRCLE_BRANCH }}-{{ .Environment.CIRCLE_SHA1 }}
                paths:
                    - dist
    deploy:
        # working_directory: ~/repo
        docker:
            - image: circleci/node:6.10-browsers
        steps:
            # Log the current branch
            - run:
                name: Show current branch
                command: echo ${CIRCLE_BRANCH}
            # Restore cache from the build job which contains the
            # dist folder that needs to be deployed
            - restore_cache:
                key: v1-dist-{{ .Environment.CIRCLE_BRANCH }}-{{ .Environment.CIRCLE_SHA1 }}
            # Install AWS cli
            - run:
                name: Install aws cli
                command:
                    sudo apt-get -y -qq install awscli
            # Set the signature version for the S3 auth
            - run:
                name: Setting Signature Version 4 for S3 Request Authentication
                command: aws configure set default.s3.signature_version s3v4
            # Deploy to the S3 bucket corresponding to the current branch
            - run:
                name: Deploy to S3
                command: |
                    if [ "${CIRCLE_BRANCH}" == "develop" ]; then
                        aws --region us-west-2 s3 sync dist s3://dev-user-data.os.sttrcancer.io/ --delete
                    elif [ "${CIRCLE_BRANCH}" == "staging" ]; then
                        aws --region us-west-2 s3 sync dist s3://staging-user-data.os.sttrcancer.io/ --delete
                    elif [ "${CIRCLE_BRANCH}" == "master" ]; then
                        aws --region us-west-2 s3 sync dist s3://user-data.os.sttrcancer.io/ --delete
                    fi
    build2:
        working_directory:
        docker:
            - image: edgecase/docker-ubuntu-node-awscli:xenial-node6
        steps:
            - setup_remote_docker:   
                docker_layer_caching: true 
            - run:
                name: Install Docker client
                command: |
                    set -x
                    VER="17.03.0-ce"
                    curl -L -o /tmp/docker-$VER.tgz https://download.docker.com/linux/static/stable/x86_64/docker-$VER.tgz
                    tar -xz -C /tmp -f /tmp/docker-$VER.tgz
                    mv /tmp/docker/* /usr/bin

            # build and push Docker image
            - run:
                apt install -y git nano
            - run: |
                  git clone https://github.com/canaantt/oncoscape-user-data-uploading
            - run:
                name: Building
                command: |
                    if [ "${CIRCLE_BRANCH}" == "staging" ]; then
                        npm run build-qa
                    elif [ "${CIRCLE_BRANCH}" == "master" ]; then
                        cd oncoscape-user-data-uploading
                        git checkout master
                        cd ..
                        docker build -t canaantt/oncoscape-data-upload:latest oncoscape-user-data-uploading/.
                        # docker build -t canaantt/oncoscape-data-upload:$CIRCLE_SHA1 oncoscape-user-data-uploading/.
                        # docker tag canaantt/oncoscape-data-upload:$CIRCLE_SHA1 canaantt/oncoscape-data-upload:latest
                        docker login -e $DOCKER_EMAIL -u $DOCKER_USER -p $DOCKER_PASS
                        docker push canaantt/oncoscape-data-upload:latest; sleep 60
                    else
                       cd oncoscape-user-data-uploading
                       git checkout develop
                       cd ..
                       ls oncoscape-user-data-uploading/
                       docker build -t canaantt/oncoscape-data-upload:dev oncoscape-user-data-uploading/.
                       docker login -e $DOCKER_EMAIL -u $DOCKER_USER -p $DOCKER_PASS
                       docker push canaantt/oncoscape-data-upload:dev; sleep 60
                    fi         
    deploy2:
       docker:
            - image: edgecase/docker-ubuntu-node-awscli:xenial-node6
        steps:
            - run:
                name: setting up kops + kubectl
                command: |
                    curl -LO https://github.com/kubernetes/kops/releases/download/$(curl -s https://api.github.com/repos/kubernetes/kops/releases/latest | grep tag_name | cut -d '"' -f 4)/kops-linux-amd64
                    chmod +x kops-linux-amd64
                    mv kops-linux-amd64 /usr/local/bin/kops
                    curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
                    chmod +x ./kubectl
                    mv ./kubectl /usr/local/bin/kubectl
                    kops update cluster os.sttrcancer.io  --state=s3://kops-state-oncoscape --yes
                    kubectl get nodes
            - run:
                name: use the newly built docker image to for the pod according to the branch
                command: |
                    if [ "${CIRCLE_BRANCH}" == "develop" ]; then
                        kubectl set image deployment/deployment-os-user-uploading os-user-uploading=canaantt/oncoscape-data-upload:develop
                    elif [ "${CIRCLE_BRANCH}" == "staging" ]; then
                        kubectl set image deployment/deployment-os-user-uploading os-user-uploading=canaantt/oncoscape-data-upload:develop
                    elif [ "${CIRCLE_BRANCH}" == "master" ]; then
                        kubectl set image deployment/deployment-os-user-uploading os-user-uploading=canaantt/oncoscape-data-upload:latest
                    fi
workflows:
    version: 2
    # The build and deploy workflow
    build_and_deploy:
        jobs:
            - build2:
                context: upload
            - deploy2:
                requires:
                    - build2
            # - build
            # The deploy job will only run on the filtered branches and
            # require the build job to be successful before it starts
            # - deploy:
                # requires:
                #     - build
                # filters:
                #     branches:
                #         only:
                #             - develop
                #             - staging
                #             - master

